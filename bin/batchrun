#!/usr/bin/env python
"""
 batchrun
 <executable to run a another code in batch mode, perhaps using multiprocessing>
 
 author: Nick Hand
 contact: nhand@berkeley.edu
 creation date: 03/14/2013
"""


import argparse, os, sys
from utils import utilities, mputils
from flipper import flipperDict
import tempfile, datetime


def taskFunc(params, valToUpdate, paramsToUpdate, className, runName):
    """
    @brief update the params
    """
    
    classFunc = utilities.stringToFunction(className)
    runFunc = getattr(classFunc, runName)
    
    # update the parameter dictionary
    newParams = utilities.update_dict(params, valToUpdate, paramsToUpdate)
        
    # instantiate the class
    c = classFunc(newParams)
    
    # run the method, with class as first argument
    runFunc(c)
    
    return 0

def batchrun(p, args):
    
    # read in the parameters we'll need to update
    params = flipperDict.flipperDict()
    params.readFromFile(p['paramFile'])    
    
    # initialize the multiprocessing master with nprocs
    master = mputils.mp_master(args.np, len(p['valsToUpdate']), progress=not args.nopbar, log=not args.show)

    # enqueue the tasks
    for cnt, i  in enumerate(p['valsToUpdate']):
        master.enqueue(mputils.task(taskFunc, params, i, p['paramsToUpdate'], p['className'], p['runFunc'], num=cnt ))
    
    # start the work and wait until it finishes
    master.run()

    return 
        

if __name__ == '__main__':
    
    # parse the input arguments
    parser = argparse.ArgumentParser(description="run a given executable in batch mode, with specified parameters")
    parser.add_argument('param_file', type=str, help='the parameter file') 
    parser.add_argument('--np', type=int, default=1, help="number of processors to use")
    parser.add_argument('-s', '--show', action='store_true', default=False, help='whether to show stdout or redirect to file')
    parser.add_argument('--nopbar', action='store_true', default=False, help='whether to use a progress bar')
  
    args = parser.parse_args()

    # read in the parameter file
    p = flipperDict.flipperDict()
    p.readFromFile(args.param_file)
    
    batchrun(p, args)