#!/usr/bin/env python
"""
 batchrun:
 executable to run an input code in batch mode, perhaps using multiprocessing
 
 author: Nick Hand
 contact: nhand@berkeley.edu
 creation date: 03/14/2013
"""
import argparse, os, sys
from utils import utilities, mputils
from flipper import flipperDict
import tempfile, datetime
import subprocess

def taskFunc(params, valToUpdate, paramsToUpdate, className, runName, executable, exec_args):
    """
    Update the params and run the function
    """
    
    try:
        if executable is None:
            if className is not None:
                classFunc = utilities.stringToFunction(className)
                runFunc = getattr(classFunc, runName)
            else:
                runFunc = utilities.stringToFunction(runName)
    
        # update the parameter dictionary
        newParams = utilities.update_dict(params, valToUpdate[0], paramsToUpdate[0])
        if len(valToUpdate) > 1:
            for i in range(1, len(valToUpdate)):
                newParams = utilities.update_dict(newParams, valToUpdate[i], paramsToUpdate[i])
        
        if executable is None:
            if className is not None:
                # instantiate the class
                c = classFunc(newParams)
    
                # run the method, with class as first argument
                runFunc(c)
            else:
                runFunc(newParams)
        else:
            # initialize a named temporary file
            tmp_params = tempfile.NamedTemporaryFile()
            
            # write out a parameter file
            newParams.writeToFile(tmp_params.name)
            
            # now do the calling assuming calling convention is "executable params.dict"
            call_list = [executable, tmp_params.name]
            if exec_args is not None: 
                if not isinstance(exec_args, dict):
                    raise TypeError("Executable arguments should be specified as a `dict`")
                for k, v in exec_args.iteritems()
                call_list += ["--%s" %k, v]
            subprocess.call(call_list)
    except:
        raise ValueError("Error setting new parameters and calling")
#end taskFunc
    
#-------------------------------------------------------------------------------
def batchrun(p, args):
    
    # read in the parameters we'll need to update
    params = flipperDict.flipperDict()
    params.readFromFile(p['paramFile'])    

    njobs = len(p['update'][0][0])
    exec_args = p.get('executable_args', None)
    if args.np > 1:
    
        # initialize the multiprocessing master with nprocs
        master = mputils.mp_master(args.np, njobs, progress=not args.nopbar, log=not args.show)

        # enqueue the tasks
        for cnt in range(njobs):
            
            i = [x[0][cnt] for x in p['update']] # this is a list of values to update to
            j = [x[1] for x in p['update']] # the corresponding values
            master.enqueue(mputils.task(taskFunc, params, i, j, p['className'], p['runFunc'], p['executable'], exec_args, num=cnt ))
    
        # start the work and wait until it finishes
        master.run()
    else:
        
        try:
            for cnt in range(njobs):
                i = [x[0][cnt] for x in p['update']] # this is a list of values to update to
                j = [x[1] for x in p['update']] # the corresponding values
                taskFunc(params, i, j, p['className'], p['runFunc'], p['executable'], exec_args)
        except:
            raise
#end batchrun
#-------------------------------------------------------------------------------

if __name__ == '__main__':
    
    # parse the input arguments
    parser = argparse.ArgumentParser(description="run a given executable in batch mode, with specified parameters")
    parser.add_argument('param_file', type=str, help='the parameter file') 
    parser.add_argument('--np', type=int, default=1, help="number of processors to use")
    parser.add_argument('-s', '--show', action='store_true', default=False, help='print stdout to the terminal')
    parser.add_argument('--nopbar', action='store_true', default=False, help='do not show the progress bar')
  
    args = parser.parse_args()

    # read in the parameter file
    p = flipperDict.flipperDict()
    p.readFromFile(args.param_file)
    
    batchrun(p, args)