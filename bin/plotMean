#!/usr/bin/env python
import numpy as np
import argparse
import plotify as pfy

def int_or_str(value):
    """
    Int object if possible, else str
    """
    try:
        value = int(value)
    except:
        value = str(value)
    return value
    
def plot_mean(args, parser):
    """
    Read in data files and plot the mean of the results, either weighted 
    or unweighted
    """
    save_name = args.get('savefig', None)
    fig, ax = pfy.plot_data(**args)
    
    # apply the extra plotting options
    master.apply_extra_options(ax)
    
    # add the legend
    if args.get('labels') is not None:
        ax.legend()

    if save_name is not None:
        fig.savefig(save_name)
    pfy.show()

#end plot_mean  

#-------------------------------------------------------------------------------
if __name__ == "__main__":
    
    # initialize the plottingparser
    master = pfy.PlottingParser("plot mean results")

    # get the parser
    parser = master.get_parser()
    
    # the only positional argument
    h = "the pattern(s) to match files on"
    parser.add_argument("patterns", type=str, nargs='+', help=h)
    
    # these are optional arguments
    h = "the name of the x variable to plot"
    parser.add_argument("--x_name", default=0, type=int_or_str, help=h)
    
    h = "the name of the y variable to plot"
    parser.add_argument("--y_name",  default=1, type=int_or_str, help=h)
    
    h = "the name of the error on the y variable"
    parser.add_argument("--yerr_name", default=2, type=int_or_str, help=h)
    
    h = 'whether to do a weighted mean of results'
    parser.add_argument('--weighted', action='store_true', default=False, help=h)
    
    h = 'the labels to apply'
    parser.add_argument('--labels', type=str, nargs='*', help=h)
    
    h = 'the offset on the x axis to apply'
    parser.add_argument('--x_offset', type=float, default=0., help=h)
    
    h = 'the offset on the y axis to apply'
    parser.add_argument('--y_offset', type=float, default=0., help=h)
    
    h = 'the output name to save the plot to'
    parser.add_argument('--savefig', type=str, help=h)
        
    # parse and return the non-plotting arguments
    args, plot_kwargs = master.parse_args()
 
    args['plot_kwargs'] = plot_kwargs
 
    plot_mean(args, master)

#end main

#-------------------------------------------------------------------------------